//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ContosoSite.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VistavkiEntities : DbContext
    {
        public VistavkiEntities()
            : base("name=VistavkiEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Exhibition> Exhibitions { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<Picture> Pictures { get; set; }
    
        public virtual ObjectResult<Nullable<int>> Insert_User(string log, string password, string role, string name, string phone)
        {
            var logParameter = log != null ?
                new ObjectParameter("Log", log) :
                new ObjectParameter("Log", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleParameter = role != null ?
                new ObjectParameter("Role", role) :
                new ObjectParameter("Role", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Insert_User", logParameter, passwordParameter, roleParameter, nameParameter, phoneParameter);
        }
    
        public virtual ObjectResult<Auth_User_Result> Auth_User(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Auth_User_Result>("Auth_User", loginParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CountPic(Nullable<int> id_artist)
        {
            var id_artistParameter = id_artist.HasValue ?
                new ObjectParameter("Id_artist", id_artist) :
                new ObjectParameter("Id_artist", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CountPic", id_artistParameter);
        }
    }
}
